Implement a system 
with multiple producers and multiple consumers 
using process-based IPC. 


For such a scenario, 
you would typically use 
    `named pipes (FIFOs)`, 
    `message queues`, or 
    `shared memory` 
to facilitate communication between processes. 


Here's how you can manage multiple producers and consumers 
using `anonymous pipes` with `fork()`.

---

Key Considerations:
1. `Pipe Management`:
   - Each producer and consumer can use separate pipes for communication.
   - Alternatively, you can use a single pipe 
   for all producers and a single pipe for all consumers, 
   but it requires careful synchronization.

2. `Synchronization`:
   - `End-of-data signals` need to be managed properly. 
   Each producer must signal the end of its data, and
   the consumers must know when to stop reading.
   - Use special values, like `-1`, to indicate the end of data from each producer.

3. `Forking Processes`:
   - Each producer and consumer can be a separate process, 
   created using `fork()`.

4. `Example Design`:
   - Multiple producers write to a single pipe.
   - Multiple consumers read from the same pipe.

---

Example Code: Multiple Producers and Consumers

Hereâ€™s an example of how to implement this setup 
using a single pipe for simplicity:

```cpp
#include <iostream>
#include <unistd.h>
#include <sys/wait.h>
#include <vector>
#include <cstdlib>
#include <ctime>

void producer(int write_fd, int producer_id) {
    // Producer generates data
    std::srand(std::time(nullptr) + producer_id); // Seed for randomness
    for (int i = 0; i < 5; ++i) {
        int value = std::rand() % 100; // Random number
        write(write_fd, &value, sizeof(value));
        std::cout << "Producer " << producer_id << " sent: " << value << std::endl;
    }
    // Signal end of data with a special value (-1)
    int end_signal = -1;
    write(write_fd, &end_signal, sizeof(end_signal));
    close(write_fd);
}

void consumer(int read_fd, int consumer_id) {
    int value;
    while (read(read_fd, &value, sizeof(value)) > 0) {
        if (value == -1) {
            // End of data signal
            break;
        }
        std::cout << "Consumer " << consumer_id << " received: " << value << std::endl;
    }
    close(read_fd);
}

int main() {
    const int NUM_PRODUCERS = 2;
    const int NUM_CONSUMERS = 2;

    int pipe_fds[2];
    if (pipe(pipe_fds) == -1) {
        perror("pipe");
        return 1;
    }

    std::vector<pid_t> producers, consumers;

    // Create producer processes
    for (int i = 0; i < NUM_PRODUCERS; ++i) {
        pid_t pid = fork();
        if (pid < 0) {
            perror("fork");
            return 1;
        } else if (pid == 0) {
            // Child process: Producer
            close(pipe_fds[0]); // Close unused read end
            producer(pipe_fds[1], i + 1);
            return 0;
        } else {
            // Parent process
            producers.push_back(pid);
        }
    }

    // Create consumer processes
    for (int i = 0; i < NUM_CONSUMERS; ++i) {
        pid_t pid = fork();
        if (pid < 0) {
            perror("fork");
            return 1;
        } else if (pid == 0) {
            // Child process: Consumer
            close(pipe_fds[1]); // Close unused write end
            consumer(pipe_fds[0], i + 1);
            return 0;
        } else {
            // Parent process
            consumers.push_back(pid);
        }
    }

    // Parent closes both ends of the pipe
    close(pipe_fds[0]);
    close(pipe_fds[1]);

    // Wait for all producers and consumers to complete
    for (pid_t pid : producers) {
        waitpid(pid, nullptr, 0);
    }
    for (pid_t pid : consumers) {
        waitpid(pid, nullptr, 0);
    }

    std::cout << "All producers and consumers have finished." << std::endl;
    return 0;
}
```

---

Key Features:
1. `Multiple Producers`:
   Each producer generates 5 random integers and 
   sends them through the pipe, ending with `-1`.

2. `Multiple Consumers`:
   Consumers read data from the pipe and 
   process it until they receive the `-1` signal.

3. `Synchronization`:
   - All processes communicate via a single pipe.
   - Each producer sends an `-1` as an end-of-data marker.

4. `Random Data`:
   Producers generate random data, 
   demonstrating the dynamic nature of production.

---

Example Output:
```
Producer 1 sent: 45
Producer 1 sent: 23
Producer 1 sent: 67
Producer 1 sent: 12
Producer 1 sent: 89
Producer 2 sent: 34
Producer 2 sent: 76
Producer 2 sent: 12
Producer 2 sent: 56
Producer 2 sent: 78
Consumer 1 received: 45
Consumer 1 received: 23
Consumer 1 received: 67
Consumer 1 received: 12
Consumer 1 received: 89
Consumer 2 received: 34
Consumer 2 received: 76
Consumer 2 received: 12
Consumer 2 received: 56
Consumer 2 received: 78
All producers and consumers have finished.
```

---

Enhancements:
1. `Named Pipes`:
   Use `mkfifo` to allow unrelated processes to communicate.

2. `Message Queues`:
   Easier to handle multiple producers and 
   consumers with explicit message queues.

3. `Shared Memory with Semaphores`:
   Provide a high-speed, concurrent communication mechanism.

Would you like an example with named pipes or message queues?