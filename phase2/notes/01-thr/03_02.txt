In C++, `std::atomic` provides atomic operations on shared data, 
ensuring thread safety without 
requiring explicit locks or mutexes. 

It is a powerful tool 
for synchronization in multithreaded programming and 
is especially useful in scenarios 
where performance is critical and 
lock-free programming is desirable.

Key Features of `std::atomic`
1. `Atomicity`: 
Ensures operations on a variable are indivisible and 
free from data races.
2. `Lock-free`: 
Many `std::atomic` operations are implemented without locks, 
making them highly efficient.
3. `Memory ordering`: 
Provides memory ordering guarantees 
for synchronization between threads.

Commonly Used Operations

| `Operation`       | `Description`                                                                                  |
|----------------------|--------------------------------------------------------------------------------------------------|
| `load()`            | Reads the value atomically.                                                                      |
| `store(value)`      | Writes a value atomically.                                                                       |
| `exchange(value)`   | Atomically replaces the current value with a new one and returns the old value.                  |
| `compare_exchange_weak()` | Conditionally modifies the value if it matches the expected value, with potential spurious failures. |
| `compare_exchange_strong()`| Conditionally modifies the value if it matches the expected value, without spurious failures. |
| `fetch_add(value)`  | Atomically adds a value and returns the old value.                                               |
| `fetch_sub(value)`  | Atomically subtracts a value and returns the old value.                                          |
| `fetch_and(value)`  | Atomically performs bitwise AND and returns the old value.                                       |
| `fetch_or(value)`   | Atomically performs bitwise OR and returns the old value.                                        |
| `fetch_xor(value)`  | Atomically performs bitwise XOR and returns the old value.                                       |

Basic Example of `std::atomic`

```cpp
#include <iostream>
#include <atomic>
#include <thread>
#include <vector>

std::atomic<int> counter(0); // Atomic counter

void increment(int n) {
    for (int i = 0; i < n; ++i) {
        counter.fetch_add(1); // Atomic increment
    }
}

int main() {
    const int num_threads = 4;
    const int increments_per_thread = 1000;

    std::vector<std::thread> threads;

    // Start threads
    for (int i = 0; i < num_threads; ++i) {
        threads.emplace_back(increment, increments_per_thread);
    }

    // Join threads
    for (auto& t : threads) {
        t.join();
    }

    // Print final counter value
    std::cout << "Final counter value: " << counter.load() << std::endl;
    return 0;
}
```

Explanation

1. `Atomic Counter`: 
`std::atomic<int> counter` ensures 
that the counter can be incremented 
by multiple threads without race conditions.
2. `Atomic Increment`: 
`counter.fetch_add(1)` atomically increments the counter, 
ensuring thread safety.
3. `Thread-safe Reading`: 
`counter.load()` reads the value atomically.

`compare_exchange` Example
This demonstrates 
how to perform an atomic compare-and-swap operation:

```cpp
#include <iostream>
#include <atomic>
#include <thread>

std::atomic<int> shared_value(42);

void update_value(int old_value, int new_value) {
    if (shared_value.compare_exchange_strong(old_value, new_value)) {
        std::cout << "Updated value to " << new_value << std::endl;
    } else {
        std::cout << "Failed to update. Current value: " << shared_value.load() << std::endl;
    }
}

int main() {
    std::thread t1(update_value, 42, 100);
    std::thread t2(update_value, 42, 200);

    t1.join();
    t2.join();

    return 0;
}
```

Explanation

- ``compare_exchange_strong``: 
Atomically checks if the current value equals 
the expected value (`old_value`). 
If true, updates it to `new_value`. 
If false, updates `old_value` 
with the actual value and returns `false`.
- This approach prevents race conditions 
when multiple threads try 
to update a shared variable.

When to Use `std::atomic`

1. `Simple Shared Data`: 
Use `std::atomic` for simple atomic operations 
(increment, decrement, bitwise operations).
2. `Lock-Free Algorithms`: 
Ideal for scenarios 
requiring high-performance lock-free programming.
3. `Thread Synchronization`: 
Useful for flags or counters 
in multithreaded environments.

Advantages
- No explicit locks required.
- High performance for basic operations.
- Memory ordering guarantees provided.

Disadvantages
- Limited to simple operations 
(use mutexes for complex scenarios).
- Requires careful design 
to avoid subtle bugs with memory ordering.