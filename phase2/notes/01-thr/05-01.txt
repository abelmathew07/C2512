c++ - multithreading - Thread Pools
==========================================================================
A `Thread Pool` is a collection of pre-instantiated, 
reusable threads that can execute tasks. 

It is an efficient way to handle multithreading in applications 
where the overhead of creating and destroying threads 
for each task is too high. 

Thread pools keep a pool of threads ready 
to execute tasks as they are submitted, 
improving resource utilization and performance.

Hereâ€™s how you can implement a basic thread pool in C++:

---

Thread Pool Implementation

```cpp
#include <iostream>
#include <vector>
#include <thread>
#include <queue>
#include <functional>
#include <mutex>
#include <condition_variable>
#include <future>
#include <atomic>

class ThreadPool {
public:
    ThreadPool(size_t numThreads);
    ~ThreadPool();

    template<class F, class... Args>
    auto enqueue(F&& f, Args&&... args) -> std::future<typename std::result_of<F(Args...)>::type>;

private:
    std::vector<std::thread> workers;           // Threads in the pool
    std::queue<std::function<void()>> tasks;    // Task queue

    std::mutex queueMutex;                      // Synchronize access to the task queue
    std::condition_variable condition;          // Notify threads about new tasks
    std::atomic<bool> stop;                     // Flag to stop the pool
};

// Constructor: Initialize the thread pool with the specified number of threads
ThreadPool::ThreadPool(size_t numThreads) : stop(false) {
    for (size_t i = 0; i < numThreads; ++i) {
        workers.emplace_back([this] {
            while (true) {
                std::function<void()> task;
                {
                    std::unique_lock<std::mutex> lock(this->queueMutex);
                    this->condition.wait(lock, [this] {
                        return this->stop || !this->tasks.empty();
                    });
                    if (this->stop && this->tasks.empty())
                        return;
                    task = std::move(this->tasks.front());
                    this->tasks.pop();
                }
                task(); // Execute the task
            }
        });
    }
}

// Destructor: Clean up threads
ThreadPool::~ThreadPool() {
    stop.store(true);
    condition.notify_all();
    for (std::thread& worker : workers) {
        if (worker.joinable())
            worker.join();
    }
}

// Enqueue a task into the thread pool
template<class F, class... Args>
auto ThreadPool::enqueue(F&& f, Args&&... args) -> std::future<typename std::result_of<F(Args...)>::type> {
    using returnType = typename std::result_of<F(Args...)>::type;

    auto task = std::make_shared<std::packaged_task<returnType()>>(
        std::bind(std::forward<F>(f), std::forward<Args>(args)...)
    );

    std::future<returnType> result = task->get_future();
    {
        std::lock_guard<std::mutex> lock(queueMutex);
        if (stop)
            throw std::runtime_error("Enqueue on stopped ThreadPool");
        tasks.emplace([task]() { (*task)(); });
    }
    condition.notify_one();
    return result;
}

```

---

Example Usage of the Thread Pool

```cpp
int main() {
    ThreadPool pool(4); // Create a thread pool with 4 threads

    std::vector<std::future<int>> results;

    // Enqueue tasks
    for (int i = 0; i < 8; ++i) {
        results.emplace_back(pool.enqueue([i] {
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
            std::cout << "Task " << i << " executed by thread " << std::this_thread::get_id() << std::endl;
            return i * i;
        }));
    }

    // Retrieve results
    for (auto&& result : results) {
        std::cout << "Result: " << result.get() << std::endl;
    }

    return 0;
}
```

---

Key Points

1. `Thread Pool Basics`:
   - A set number of threads are created and wait for tasks.
   - Tasks are submitted to a queue, and threads process tasks from the queue.

2. `Synchronization`:
   - A `std::mutex` protects the task queue.
   - A `std::condition_variable` notifies threads when tasks are added.

3. `Dynamic Task Enqueuing`:
   - Tasks are submitted using `enqueue`, which wraps the task in a `std::packaged_task` to support return values.

4. `Graceful Shutdown`:
   - The `stop` flag ensures threads exit cleanly during destruction.

---

Example Output

```
Task 0 executed by thread 123456
Task 1 executed by thread 123457
Task 2 executed by thread 123458
Task 3 executed by thread 123459
Task 4 executed by thread 123456
Task 5 executed by thread 123457
Task 6 executed by thread 123458
Task 7 executed by thread 123459
Result: 0
Result: 1
Result: 4
Result: 9
Result: 16
Result: 25
Result: 36
Result: 49
```

---

Advantages of Using a Thread Pool

1. `Performance`:
   - Avoids frequent thread creation and destruction.
2. `Resource Management`:
   - Limits the number of threads to prevent overloading the system.
3. `Scalability`:
   - Allows for concurrent task execution while controlling system resources.

---

This implementation is thread-safe, flexible, and 
can handle a variety of tasks in a multithreaded environment. 
It forms a good foundation 
for building robust multithreaded applications.