A simpler version of a thread pool 
if you don't need advanced features 
like futures or exception handling. 

This minimal implementation focuses on 
creating a pool of threads and 
assigning tasks from a queue. 

Hereâ€™s a straightforward example:

---

Simple Thread Pool Implementation

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <functional>
#include <atomic>

class SimpleThreadPool {
public:
    SimpleThreadPool(size_t numThreads);
    ~SimpleThreadPool();

    void enqueue(std::function<void()> task);

private:
    std::vector<std::thread> workers;           // Threads
    std::queue<std::function<void()>> tasks;    // Task queue

    std::mutex queueMutex;                      // Protects task queue
    std::condition_variable condition;          // Signals threads
    std::atomic<bool> stop;                     // Stop flag

    void workerThread();                        // Function executed by each thread
};

SimpleThreadPool::SimpleThreadPool(size_t numThreads) : stop(false) {
    for (size_t i = 0; i < numThreads; ++i) {
        workers.emplace_back([this] { this->workerThread(); });
    }
}

SimpleThreadPool::~SimpleThreadPool() {
    stop.store(true);
    condition.notify_all(); // Wake up all threads to exit
    for (std::thread& worker : workers) {
        if (worker.joinable())
            worker.join();
    }
}

void SimpleThreadPool::enqueue(std::function<void()> task) {
    {
        std::lock_guard<std::mutex> lock(queueMutex);
        tasks.push(std::move(task));
    }
    condition.notify_one(); // Notify one waiting thread
}

void SimpleThreadPool::workerThread() {
    while (true) {
        std::function<void()> task;
        {
            std::unique_lock<std::mutex> lock(queueMutex);
            condition.wait(lock, [this] { return stop || !tasks.empty(); });
            if (stop && tasks.empty()) return;
            task = std::move(tasks.front());
            tasks.pop();
        }
        task(); // Execute the task
    }
}
```

---

Example Usage

```cpp
int main() {
    SimpleThreadPool pool(4); // Create a pool with 4 threads

    for (int i = 0; i < 8; ++i) {
        pool.enqueue([i] {
            std::cout << "Task " << i << " executed by thread " << std::this_thread::get_id() << std::endl;
            std::this_thread::sleep_for(std::chrono::milliseconds(100)); // Simulate work
        });
    }

    std::this_thread::sleep_for(std::chrono::seconds(2)); // Wait for tasks to complete
    return 0;
}
```

---

Key Features of This Simple Thread Pool

1. `Basic Task Queue`:
   - Tasks are stored in a `std::queue`.
   - Tasks are simply functions (`std::function<void()>`) to be executed.

2. `Worker Threads`:
   - Threads continuously fetch tasks from the queue and execute them.
   - Use `std::condition_variable` to signal when new tasks are available.

3. `Stop Mechanism`:
   - The `stop` flag ensures threads exit gracefully when the pool is destroyed.

---

Example Output

```
Task 0 executed by thread 140273127671552
Task 1 executed by thread 140273119278848
Task 2 executed by thread 140273110886144
Task 3 executed by thread 140273102493440
Task 4 executed by thread 140273127671552
Task 5 executed by thread 140273119278848
Task 6 executed by thread 140273110886144
Task 7 executed by thread 140273102493440
```

---

Why Choose a Simple Thread Pool?

1. `Quick to Implement`:
   - Minimal code compared to more complex thread pool implementations.
2. `Lightweight`:
   - No use of advanced features like `std::future` or error handling.
3. `Efficient for Small Applications`:
   - Works well for simple, fire-and-forget task execution.

---

This simple thread pool is a great starting point 
for multithreaded applications 
where you want basic task management without complex requirements. 
If your needs grow, 
you can build upon this foundation to add more features.